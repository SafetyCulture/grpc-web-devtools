// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExampleOneRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExampleOneRequest) Reset()         { *m = ExampleOneRequest{} }
func (m *ExampleOneRequest) String() string { return proto.CompactTextString(m) }
func (*ExampleOneRequest) ProtoMessage()    {}
func (*ExampleOneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{0}
}

func (m *ExampleOneRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExampleOneRequest.Unmarshal(m, b)
}
func (m *ExampleOneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExampleOneRequest.Marshal(b, m, deterministic)
}
func (m *ExampleOneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleOneRequest.Merge(m, src)
}
func (m *ExampleOneRequest) XXX_Size() int {
	return xxx_messageInfo_ExampleOneRequest.Size(m)
}
func (m *ExampleOneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleOneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleOneRequest proto.InternalMessageInfo

func (m *ExampleOneRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ExampleOneResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExampleOneResponse) Reset()         { *m = ExampleOneResponse{} }
func (m *ExampleOneResponse) String() string { return proto.CompactTextString(m) }
func (*ExampleOneResponse) ProtoMessage()    {}
func (*ExampleOneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{1}
}

func (m *ExampleOneResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExampleOneResponse.Unmarshal(m, b)
}
func (m *ExampleOneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExampleOneResponse.Marshal(b, m, deterministic)
}
func (m *ExampleOneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleOneResponse.Merge(m, src)
}
func (m *ExampleOneResponse) XXX_Size() int {
	return xxx_messageInfo_ExampleOneResponse.Size(m)
}
func (m *ExampleOneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleOneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleOneResponse proto.InternalMessageInfo

func (m *ExampleOneResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExampleOneResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type StreamRequest struct {
	Error                bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{2}
}

func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

type ServerTime struct {
	Time                 string   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerTime) Reset()         { *m = ServerTime{} }
func (m *ServerTime) String() string { return proto.CompactTextString(m) }
func (*ServerTime) ProtoMessage()    {}
func (*ServerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{3}
}

func (m *ServerTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerTime.Unmarshal(m, b)
}
func (m *ServerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerTime.Marshal(b, m, deterministic)
}
func (m *ServerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerTime.Merge(m, src)
}
func (m *ServerTime) XXX_Size() int {
	return xxx_messageInfo_ServerTime.Size(m)
}
func (m *ServerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerTime.DiscardUnknown(m)
}

var xxx_messageInfo_ServerTime proto.InternalMessageInfo

func (m *ServerTime) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func init() {
	proto.RegisterType((*ExampleOneRequest)(nil), "s12.example.ExampleOneRequest")
	proto.RegisterType((*ExampleOneResponse)(nil), "s12.example.ExampleOneResponse")
	proto.RegisterType((*StreamRequest)(nil), "s12.example.StreamRequest")
	proto.RegisterType((*ServerTime)(nil), "s12.example.ServerTime")
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_15a1dc8d40dadaa6) }

var fileDescriptor_15a1dc8d40dadaa6 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2e, 0x36, 0x34, 0xd2, 0x83,
	0x0a, 0x49, 0xf1, 0x41, 0x19, 0x46, 0x10, 0x49, 0x25, 0x55, 0x2e, 0x41, 0x57, 0x88, 0x88, 0x7f,
	0x5e, 0x6a, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x00, 0x17, 0x73, 0x6e, 0x71, 0xba,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0xa9, 0x64, 0xc6, 0x25, 0x84, 0xac, 0xac, 0xb8,
	0x20, 0x3f, 0xaf, 0x38, 0x55, 0x88, 0x8f, 0x8b, 0x29, 0x33, 0x05, 0xaa, 0x8c, 0x29, 0x33, 0x05,
	0xa6, 0x8f, 0x09, 0xa1, 0x4f, 0x95, 0x8b, 0x37, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x17, 0x66, 0xb4,
	0x08, 0x17, 0x6b, 0x6a, 0x51, 0x51, 0x7e, 0x11, 0x58, 0x17, 0x47, 0x10, 0x84, 0xa3, 0xa4, 0xc0,
	0xc5, 0x15, 0x9c, 0x5a, 0x54, 0x96, 0x5a, 0x14, 0x92, 0x99, 0x9b, 0x2a, 0x24, 0xc4, 0xc5, 0x52,
	0x92, 0x99, 0x9b, 0x0a, 0x35, 0x18, 0xcc, 0x36, 0x3a, 0xc9, 0xc4, 0xc5, 0x07, 0x75, 0x01, 0x48,
	0x65, 0x66, 0x72, 0xaa, 0x90, 0x2f, 0x17, 0x17, 0xc2, 0x4d, 0x42, 0x72, 0x7a, 0x48, 0xde, 0xd4,
	0xc3, 0xf0, 0x93, 0x94, 0x3c, 0x4e, 0x79, 0xa8, 0x67, 0x10, 0xc6, 0x85, 0x94, 0xe7, 0x63, 0x37,
	0x2e, 0xa4, 0x3c, 0x1f, 0xaf, 0x71, 0x60, 0x79, 0xa8, 0x71, 0x7e, 0x5c, 0xdc, 0x8e, 0x39, 0xe5,
	0x89, 0x95, 0xc5, 0xae, 0x20, 0x1f, 0x52, 0xee, 0x3c, 0x4f, 0x2e, 0x01, 0x48, 0x48, 0x66, 0xe6,
	0xa5, 0x43, 0xa5, 0x85, 0xa4, 0x50, 0x34, 0xa1, 0x04, 0xb4, 0x94, 0x38, 0xaa, 0x1c, 0x3c, 0x74,
	0x0d, 0x18, 0x9d, 0xd8, 0xa2, 0x58, 0x72, 0x13, 0x33, 0xf3, 0x92, 0xd8, 0xc0, 0x49, 0xc0, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x68, 0xf8, 0x20, 0xb3, 0x30, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleServiceClient interface {
	ExampleOne(ctx context.Context, in *ExampleOneRequest, opts ...grpc.CallOption) (*ExampleOneResponse, error)
	ExampleTwo(ctx context.Context, in *ExampleTwoRequest, opts ...grpc.CallOption) (*ExampleTwoResponse, error)
	AlwaysError(ctx context.Context, in *ExampleOneRequest, opts ...grpc.CallOption) (*ExampleOneResponse, error)
	StreamingExample(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (ExampleService_StreamingExampleClient, error)
}

type exampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewExampleServiceClient(cc *grpc.ClientConn) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) ExampleOne(ctx context.Context, in *ExampleOneRequest, opts ...grpc.CallOption) (*ExampleOneResponse, error) {
	out := new(ExampleOneResponse)
	err := c.cc.Invoke(ctx, "/s12.example.ExampleService/ExampleOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) ExampleTwo(ctx context.Context, in *ExampleTwoRequest, opts ...grpc.CallOption) (*ExampleTwoResponse, error) {
	out := new(ExampleTwoResponse)
	err := c.cc.Invoke(ctx, "/s12.example.ExampleService/ExampleTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) AlwaysError(ctx context.Context, in *ExampleOneRequest, opts ...grpc.CallOption) (*ExampleOneResponse, error) {
	out := new(ExampleOneResponse)
	err := c.cc.Invoke(ctx, "/s12.example.ExampleService/AlwaysError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) StreamingExample(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (ExampleService_StreamingExampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExampleService_serviceDesc.Streams[0], "/s12.example.ExampleService/StreamingExample", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceStreamingExampleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExampleService_StreamingExampleClient interface {
	Recv() (*ServerTime, error)
	grpc.ClientStream
}

type exampleServiceStreamingExampleClient struct {
	grpc.ClientStream
}

func (x *exampleServiceStreamingExampleClient) Recv() (*ServerTime, error) {
	m := new(ServerTime)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServiceServer is the server API for ExampleService service.
type ExampleServiceServer interface {
	ExampleOne(context.Context, *ExampleOneRequest) (*ExampleOneResponse, error)
	ExampleTwo(context.Context, *ExampleTwoRequest) (*ExampleTwoResponse, error)
	AlwaysError(context.Context, *ExampleOneRequest) (*ExampleOneResponse, error)
	StreamingExample(*StreamRequest, ExampleService_StreamingExampleServer) error
}

// UnimplementedExampleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExampleServiceServer struct {
}

func (*UnimplementedExampleServiceServer) ExampleOne(ctx context.Context, req *ExampleOneRequest) (*ExampleOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleOne not implemented")
}
func (*UnimplementedExampleServiceServer) ExampleTwo(ctx context.Context, req *ExampleTwoRequest) (*ExampleTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleTwo not implemented")
}
func (*UnimplementedExampleServiceServer) AlwaysError(ctx context.Context, req *ExampleOneRequest) (*ExampleOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlwaysError not implemented")
}
func (*UnimplementedExampleServiceServer) StreamingExample(req *StreamRequest, srv ExampleService_StreamingExampleServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingExample not implemented")
}

func RegisterExampleServiceServer(s *grpc.Server, srv ExampleServiceServer) {
	s.RegisterService(&_ExampleService_serviceDesc, srv)
}

func _ExampleService_ExampleOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).ExampleOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s12.example.ExampleService/ExampleOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).ExampleOne(ctx, req.(*ExampleOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_ExampleTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).ExampleTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s12.example.ExampleService/ExampleTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).ExampleTwo(ctx, req.(*ExampleTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_AlwaysError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).AlwaysError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s12.example.ExampleService/AlwaysError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).AlwaysError(ctx, req.(*ExampleOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_StreamingExample_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServiceServer).StreamingExample(m, &exampleServiceStreamingExampleServer{stream})
}

type ExampleService_StreamingExampleServer interface {
	Send(*ServerTime) error
	grpc.ServerStream
}

type exampleServiceStreamingExampleServer struct {
	grpc.ServerStream
}

func (x *exampleServiceStreamingExampleServer) Send(m *ServerTime) error {
	return x.ServerStream.SendMsg(m)
}

var _ExampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "s12.example.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExampleOne",
			Handler:    _ExampleService_ExampleOne_Handler,
		},
		{
			MethodName: "ExampleTwo",
			Handler:    _ExampleService_ExampleTwo_Handler,
		},
		{
			MethodName: "AlwaysError",
			Handler:    _ExampleService_AlwaysError_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingExample",
			Handler:       _ExampleService_StreamingExample_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}
